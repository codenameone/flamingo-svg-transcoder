${PACKAGE}

import com.codename1.ui.*;
import com.codename1.ui.geom.*;

/**
 * This class has been automatically generated using
 * <a href="http://ebourg.github.io/flamingo-svg-transcoder/">Flamingo SVG transcoder</a>.
 */
public class ${CLASSNAME} extends com.codename1.ui.Image implements Painter {
    private int width, height;

    public ${CLASSNAME}() {
        super(null);
        width = getOrigWidth();
        height = getOrigHeight();
    }

    public ${CLASSNAME}(int width, int height) {
        super(null);
        this.width = width;
        this.height = height;
    }
            
    @Override
    public int getWidth() {
        return width;
    }

    @Override
    public int getHeight() {
        return height;
    }

    @Override
    public void scale(int width, int height) {
        this.width = width;
        this.height = height;
    }

    @Override
    public Image fill(int width, int height) {
        return new ${CLASSNAME}(width, height);
    }

    @Override
    public Image applyMask(Object mask) {
        return new ${CLASSNAME}(width, height);
    }

    @Override
    public boolean isAnimation() {
        return true;
    }

    @Override
    public boolean requiresDrawImage() {
        return true;
    }

    @Override
    protected void drawImage(Graphics g, Object nativeGraphics, int x, int y) {
        drawImage(g, nativeGraphics, x, y, width, height);
    }

    @Override
    protected void drawImage(Graphics g, Object nativeGraphics, int x, int y, int w, int h) {
        float hRatio = ((float)w) / ((float)getOrigWidth());
        float vRatio = ((float)h) / ((float)getOrigHeight());
        int origX = g.getTranslateX();
        int origY = g.getTranslateY();
        g.translate(-origX, -origY);
        g.scale(hRatio, vRatio);
        int tx = (int)(((float)x) / hRatio);
        int ty = (int)(((float)y) / vRatio);
        g.translate(tx, ty);
        paint(g);
        g.resetAffine();
        g.translate(origX - g.getTranslateX(), origY - g.getTranslateY());
    }

    private static void paint(Graphics g) {
        int origAlpha = g.getAlpha();
        Shape shape;
        g.setAntiAliased(true);
        g.setAntiAliasedText(true);
        /*Composite origComposite = g.getComposite();
        if (origComposite instanceof AlphaComposite) {
            AlphaComposite origAlphaComposite = (AlphaComposite)origComposite;
            if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {
                origAlpha = origAlphaComposite.getAlpha();
            }
        }
        
        java.util.LinkedList<AffineTransform> transformations = new java.util.LinkedList<AffineTransform>();*/
        
${PAINTING_CODE}

        g.setAlpha(origAlpha);
        g.resetAffine();
    }

    /**
     * Returns the X of the bounding box of the original SVG image.
     * 
     * @return The X of the bounding box of the original SVG image.
     */
    public static int getOrigX() {
        return ${X};
    }

    /**
     * Returns the Y of the bounding box of the original SVG image.
     * 
     * @return The Y of the bounding box of the original SVG image.
     */
    public static int getOrigY() {
        return ${Y};
    }

    /**
     * Returns the width of the bounding box of the original SVG image.
     * 
     * @return The width of the bounding box of the original SVG image.
     */
    public static int getOrigWidth() {
        return ${WIDTH};
    }

    /**
     * Returns the height of the bounding box of the original SVG image.
     * 
     * @return The height of the bounding box of the original SVG image.
     */
    public static int getOrigHeight() {
        return ${HEIGHT};
    }

    @Override
    public void paint(Graphics g, Rectangle rect) {
        drawImage(g, null, rect.getX(), rect.getY(), rect.getWidth(), rect.getHeight());
    }
}
